def __call__(self):
    current_data = self._data
    current_index = self._index
    while len(current_index) > 0:
        tentative_centroid_relative_index = self._furthest_point_relative_index(current_data)
        tentative_centroid_index = current_index[tentative_centroid_relative_index]

        anomalous_cluster = self._cluster(tentative_centroid_index)
        anomaly = np.full(shape=current_index.shape, fill_value=False, dtype=bool)
        anomaly[tentative_centroid_relative_index] = True

        for loop_control in range(APInit._MAX_LOOPS):
            dist_point_to_origin = np.apply_along_axis(
                func1d=lambda point: self._cluster_structure.dist_point_to_point(point,
                                                                                 self._origin, anomalous_cluster),
                axis=1, arr=current_data)

            dist_point_to_anomalous_centroid = np.apply_along_axis(
                func1d=lambda point: self._cluster_structure.dist_point_to_cluster(point, anomalous_cluster),
                axis=1, arr=current_data)

            anomaly = dist_point_to_origin >= dist_point_to_anomalous_centroid
            anomalous_points_indices = current_index[anomaly].flatten()
            new_anomalous_cluster = self._cluster(anomalous_points_indices)
            if new_anomalous_cluster == anomalous_cluster:
                break
            anomalous_cluster = new_anomalous_cluster
        if anomalous_cluster.power >= self.threshold:
            self._cluster_structure.add_cluster(anomalous_cluster)
        current_data = current_data[~anomaly]
        current_index = current_index[~anomaly]
    return self._cluster_structure.current_labels()
